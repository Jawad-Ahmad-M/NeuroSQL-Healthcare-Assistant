import sys
from PyQt5.QtWidgets import QApplication, QMainWindow,QPushButton
from PyQt5.QtCore import pyqtSlot, QFile, QTextStream
import PyQt5.QtCore
from sidebar_ui import Ui_MainWindow

######  Importing my query executor function in my program #######
from database_commands.project_data_base import execute_query 

###### Importing my chat function in my program ######
from api_keys.openaikeys import chat,chat_ai

class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.ui.icons_only_widget.hide()
        self.ui.stackedWidget.setCurrentIndex(0)
        self.ui.api_btn_1.setChecked(True)

        self.ui.main_ai_result.setPlaceholderText("The results from your request will be shown here."
"Check back here for your processed output.")
        self.ui.main_ai_input.setPlaceholderText("Hey! Got a question? Iâ€™m here to help, just type it in!")



        self.ui.select_ai_input.setPlaceholderText("Enter the statement whose SQL query you want here...")
        self.ui.select_ai_result.setPlaceholderText("Here will be the SQL query generated by the AI based on your input.")
        self.ui.select_manual_input.setPlaceholderText("Enter a valid DATA RETRIEVAL SQL statement to interact with the database.")
        self.ui.select_manual_result.setPlaceholderText("Here the results will be fetched from your local database based on the query.")
        
        self.ui.insert_ai_input.setPlaceholderText("Enter the statement whose SQL query you want here...")
        self.ui.insert_ai_result.setPlaceholderText("Here will be the SQL query generated by the AI based on your input.")
        self.ui.insert_manual_input.setPlaceholderText("Enter a valid DATA INSERTION SQL statement to interact with the database.")
        self.ui.insert_manual_result.setPlaceholderText("Here the results will be fetched from your local database based on the query.")
        
        self.ui.delete_ai_input.setPlaceholderText("Enter the statement whose SQL query you want here...")
        self.ui.delete_ai_result.setPlaceholderText("Here will be the SQL query generated by the AI based on your input.")
        self.ui.delete_manual_input.setPlaceholderText("Enter a valid DATA DELETION SQL statement to interact with the database.")
        self.ui.delete_manual_result.setPlaceholderText("Here the results will be fetched from your local database based on the query.")
        
        self.ui.update_ai_input.setPlaceholderText("Enter the statement whose SQL query you want here...")
        self.ui.update_ai_result.setPlaceholderText("Here will be the SQL query generated by the AI based on your input.")
        self.ui.update_manual_input.setPlaceholderText("Enter a valid DATA MODIFICATION SQL statement to interact with the database.")
        self.ui.update_manual_result.setPlaceholderText("Here the results will be fetched from your local database based on the query.")
        
        self.ui.schema_ai_input.setPlaceholderText("Enter the statement whose SQL query you want here...")
        self.ui.schema_ai_result.setPlaceholderText("Here will be the SQL query generated by the AI based on your input.")
        self.ui.schema_manual_input.setPlaceholderText("Enter a valid SCHEMA MODIFICATION SQL statement to interact with the database.")
        self.ui.schema_manual_result.setPlaceholderText("Here the results will be fetched from your local database based on the query.")


        def reset_inner_stacks():
            self.ui.stackedWidget_2.setCurrentIndex(0)
            self.ui.stackedWidget_3.setCurrentIndex(0)
            self.ui.stackedWidget_4.setCurrentIndex(0)
            self.ui.stackedWidget_5.setCurrentIndex(0)
            self.ui.stackedWidget_6.setCurrentIndex(0)

        # API Page
        self.ui.api_btn_1.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(0), reset_inner_stacks()))
        self.ui.api_btn_2.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(0), reset_inner_stacks()))
        # SELECT
        self.ui.select_query_btn_1.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(1), reset_inner_stacks()))
        self.ui.select_query_btn_2.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(1), reset_inner_stacks()))
        # INSERT
        self.ui.insert_query_btn_1.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(2), reset_inner_stacks()))
        self.ui.insert_query_btn_2.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(2), reset_inner_stacks()))
        # DELETE
        self.ui.delete_query_btn_1.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(3), reset_inner_stacks()))
        self.ui.delete_query_btn_2.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(3), reset_inner_stacks()))
        # UPDATE
        self.ui.update_query_btn_1.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(4), reset_inner_stacks()))
        self.ui.update_query_btn_2.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(4), reset_inner_stacks()))
        # SCHEMA
        self.ui.schema_query_btn_1.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(5), reset_inner_stacks()))
        self.ui.schema_query_btn_2.clicked.connect(lambda: (self.ui.stackedWidget.setCurrentIndex(5), reset_inner_stacks()))




        # SELECT Query Page: Proceed -> show next page (index 1)
        self.ui.select_proceed_btn.clicked.connect(lambda: self.ui.stackedWidget_2.setCurrentIndex(1))
        # INSERT Query Page: Proceed -> show next page (index 1)
        self.ui.insert_proceed_btn.clicked.connect(lambda: self.ui.stackedWidget_3.setCurrentIndex(1))
        # DELETE Query Page: Proceed -> show next page (index 1)
        self.ui.delete_proceed_btn.clicked.connect(lambda: self.ui.stackedWidget_4.setCurrentIndex(1))
        # UPDATE Query Page: Proceed -> show next page (index 1)
        self.ui.update_proceed_btn.clicked.connect(lambda: self.ui.stackedWidget_5.setCurrentIndex(1))
        # Schema Manipulation Page: Proceed -> show next page(index 1)
        self.ui.schema_proceed_btn.clicked.connect(lambda: self.ui.stackedWidget_6.setCurrentIndex(1))
        
        ############     Lines for Pressing buttons to engage with the responses generated after executing queries ############
        self.ui.select_manual_btn.clicked.connect(self.select_query_executor)
        self.ui.insert_manual_btn.clicked.connect(self.insert_query_executor)
        self.ui.delete_manual_btn.clicked.connect(self.delete_query_executor)
        self.ui.update_manual_btn.clicked.connect(self.update_query_executor)
        self.ui.schema_manual_btn.clicked.connect(self.schema_query_executor)

        self.ui.select_ai_btn.clicked.connect(self.select_ai_query_executor)
        self.ui.insert_ai_btn.clicked.connect(self.insert_ai_query_executor)
        self.ui.delete_ai_btn.clicked.connect(self.delete_ai_query_executor)
        self.ui.update_ai_btn.clicked.connect(self.update_ai_query_executor)
        self.ui.main_ai_input_btn.clicked.connect(self.main_ai_query_executor)
        self.ui.schema_ai_btn.clicked.connect(self.schema_ai_query_executor)


    def select_query_executor(self):
        query = self.ui.select_manual_input.toPlainText()
        result = execute_query(query,"select")
        self.ui.select_manual_result.setText(result)

    def insert_query_executor(self):
        query = self.ui.insert_manual_input.toPlainText()
        result = execute_query(query,"insert")
        self.ui.insert_manual_result.setText(result)

    def delete_query_executor(self):
        query = self.ui.delete_manual_input.toPlainText()
        result = execute_query(query,"delete")
        self.ui.delete_manual_result.setText(result)
    
    def update_query_executor(self):
        query = self.ui.update_manual_input.toPlainText()
        result = execute_query(query,"update")
        self.ui.update_manual_result.setText(result)

    def schema_query_executor(self):
        query = self.ui.schema_manual_input.toPlainText()
        result = execute_query(query,"schema")
        self.ui.schema_manual_result.setText(result)

    
    def select_ai_query_executor(self):
        query = self.ui.select_ai_input.toPlainText()
        result = chat((query),"select")
        self.ui.select_ai_result.setText(result)
    
    def insert_ai_query_executor(self):
        query = self.ui.insert_ai_input.toPlainText()
        result = chat((query),"insert")
        self.ui.insert_ai_result.setText(result)
    
    def delete_ai_query_executor(self):
        query = self.ui.delete_ai_input.toPlainText()
        result = chat((query),"delete")
        self.ui.delete_ai_result.setText(result)

    def update_ai_query_executor(self):
        query = self.ui.update_ai_input.toPlainText()
        result = chat((query),"update")
        self.ui.update_ai_result.setText(result)
    
    def main_ai_query_executor(self):
        query = self.ui.main_ai_input.toPlainText()
        result = chat_ai(query)
        self.ui.main_ai_result.setText(result)

    def schema_ai_query_executor(self):
        query = self.ui.schema_ai_input.toPlainText()
        result = chat(query,"schema")
        self.ui.schema_ai_result.setText(result)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    with open("style.qss","r") as style_file:
        style_str = style_file.read()
    app.setStyleSheet(style_str)

    window = MainWindow()
    window.show()

    sys.exit(app.exec())



    

